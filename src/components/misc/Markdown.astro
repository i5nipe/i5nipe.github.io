---
import { getImage } from "astro:assets";
import path from "node:path";
import { parseHTML } from "linkedom";
import "@fontsource-variable/jetbrains-mono";
import "@fontsource-variable/jetbrains-mono/wght-italic.css";

interface Props {
	class: string;
	basePath?: string;
}
const { class: className, basePath = "/" } = Astro.props;
/*
 * Normally, relative paths under the `src` directory are handled by Astro.
 * However, paths that the plugin couldn't process may appear here and require separate handling.
 */
const html = await Astro.slots.render("default");
const { document } = parseHTML(html);
await (async () => {
	// biome-ignore lint: using dynamic imports
	const modules: Record<string, any> = import.meta.glob(
		"../../**/*.{jpeg,jpg,png,tiff,webp,gif,svg,avif}",
	);
	const re = /^(?![a-zA-Z]+:\/|\/)/;
	for (const img of document.querySelectorAll("img")) {
		const src = img.getAttribute("src");
		if (!src || !re.test(src)) continue;
		const normalizedPath = path
			.normalize(path.join("../../", basePath, src))
			.replaceAll("\\", "/");
		const moduleLoader = modules[normalizedPath];
		if (!moduleLoader) continue;
		try {
			const module = await moduleLoader();
			const result = await getImage({ src: module.default });
			img.setAttribute("src", result.src);
		} catch (error) {
			console.warn(
				`Skipping image "${normalizedPath}" due to processing error:`,
				error,
			);
		}
	}
})();
---
<div data-pagefind-body class={`prose dark:prose-invert prose-base !max-w-none custom-md ${className}`}>
    <!--<div class="prose dark:prose-invert max-w-none custom-md">-->
    <!--<div class="max-w-none custom-md">-->
    <Fragment set:html={document.toString()} />
</div>

<script>
document.addEventListener("click", function (e: MouseEvent) {
    const target = e.target as Element | null;
    if (target && target.classList.contains("copy-btn")) {
        const preEle = target.closest("pre");
        const codeEle = preEle?.querySelector("code");
        const code = Array.from(codeEle?.querySelectorAll(".code:not(summary *)") ?? [])
            .map(el => el.textContent)
            .map(t => t === "\n" ? "" : t)
            .join("\n");
        navigator.clipboard.writeText(code);

        const timeoutId = target.getAttribute("data-timeout-id");
        if (timeoutId) {
            clearTimeout(parseInt(timeoutId));
        }

        target.classList.add("success");

        // 设置新的timeout并保存ID到按钮的自定义属性中
        const newTimeoutId = setTimeout(() => {
            target.classList.remove("success");
        }, 1000);

        target.setAttribute("data-timeout-id", newTimeoutId.toString());
    }
});
</script>
